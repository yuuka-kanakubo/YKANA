#ifndef SETTINGS
#define SETTINGS
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <sstream>
#include <fstream>
#include <memory>
#include "Constants.h"
#include "Message.h"
#include "LogSettings.h"
#include "EbyeInfo.h"

using std::cout;
using std::endl;

class Settings{

	private:

		Message* ms;


	public:

		//------------------------------------------------------------------------
		class Options{

			private:

				std::string inputfname;
				std::string out_directory_name;
				std::string ext;
				std::string out_fname;
				std::string multiplicity_fname;
				std::string multiplicity_fname_ext;
				std::string dir_name_CentCut;
				std::string f_name_CentCut;
				std::string ext_name_CentCut;
				int nfiles;

				//Centrality Cut
				bool CentralityCut;
				bool Specify_dir_for_CentralityCut;
				bool Specify_f_for_CentralityCut;
				bool Specify_ext_for_CentralityCut;
				bool parton_level;
				bool rapidity_shift;
				bool high_pt_mode;
				bool cut_INEL_lg_0;
				bool trig_3outof3;
				bool trig_2outof3;
				bool trig_VZEROAND;
				bool ATLAS_cut;
				bool only_core;
				bool only_corona;
				bool print_eBye;
				bool print_dndmt;
				bool flag_pPb_cm_calculation;
				bool flag_multiplicity_cut;
				unsigned int mid_rapidity_cut_type;
				unsigned int axis_type;
				double long_range_hist_pm;
				double multip_cut_more_than;
				double multip_cut_less_than;




			public:

				//Set functions.
				//-----------------------
				void set_dir_name(std::string name){this->dir_name=name;}
				void set_f_name(std::string name){this->f_name=name;}
				void set_ext_name(std::string name){this->ext_name=name;}
				void set_nfile(int n){this->nfile=n;}
				void set_dir_name_CentCut(std::string name){this->dir_name_CentCut=name;}
				void set_f_name_CentCut(std::string name){this->f_name_CentCut=name;}
				void set_ext_name_CentCut(std::string name){this->ext_name_CentCut=name;}

				void set_parton_level_hist(){parton_level=true;};
				void set_rapidity_shift_hist(){rapidity_shift=true;};
				void set_flag_high_pt_mode(){high_pt_mode=true; cout << ":o HIGH PT MODE is called. Currently PP7TeV events are assumed. Please change a settings if you are analyzing different energy or system." << endl;};
				void set_INEL_lg_0(){cut_INEL_lg_0=true;};
				void set_trig_3outof3(){trig_3outof3=true;};
				void set_trig_2outof3(){trig_2outof3=true;};
				void set_trig_VZEROAND(){trig_VZEROAND=true;};
				void set_ATLAS_cut(){ ATLAS_cut=true; 
					this->set_longrange_of_hist__plus_minus(constants::w_eta_ATLAS_cut);
					mid_rapidity_cut_type=3;
				};
				void set_flag_multiplicity_cut_more_than(const double multip_cut_more_than_in){
					flag_multiplicity_cut=true;
					multip_cut_more_than=multip_cut_more_than_in;
				};
				void set_flag_multiplicity_cut_less_than(const double multip_cut_less_than_in){
					flag_multiplicity_cut=true;
					multip_cut_less_than=multip_cut_less_than_in;
				};
				void set_longrange_of_hist__plus_minus(const double dy){long_range_hist_pm=dy;};
				void set_mid_rapidity_cut_type(const int cut_type){mid_rapidity_cut_type=cut_type;};
				void set_flag_pPb_cm_calculation(){
					flag_pPb_cm_calculation=true;
					mid_rapidity_cut_type=2;
					cout << ":O mid-rapidity cut is automatically set to be -0.5<y_{cm}<0." << endl;
				}
				void set_flag_only_core(){only_core=true;}
				void set_flag_only_corona(){only_corona=true;}
				void set_flag_print_eBye(){print_eBye=true;}
				void set_flag_print_dndmt(){this->print_dndmt=true;}
				bool set_flag_Specify_dir_for_CentralityCut(){this->Specify_dir_for_CentralityCut=true;}
				bool set_flag_Specify_f_for_CentralityCut(){this->Specify_f_for_CentralityCut=true;}
				bool set_flag_Specify_ext_for_CentralityCut(){this->Specify_ext_for_CentralityCut=true;}
				void set_flag_CentralityCut(int collision_type_in=-1){
					CentralityCut=true;
					collision_type=collision_type_in;
					if(collision_type==1){
						cout << ":)Centrality cut for pPb." << endl;
					}else if(collision_type==2){
						cout << ":)Centrality cut for PbPb." << endl;
					}else if(collision_type==3){
						cout << ":)Centrality cut for pp." << endl;
					}else if(collision_type==9){
						cout << ":)Centrality cut original." << endl;
					}else{
						cout << "ERROR:( Something wrong with --CentralityCut. Specify appropriate collision type. ex) --CentralityCut 1" << endl;
						cout << "        1: pPb, 2:PbPb, 3:pp, 9: original " << endl;
						exit(1);
					}
				}

				//Get functions.
				//-----------------------
				string get_dir_name(){return this->dir_name;}
				string get_f_name(){return this->f_name;}
				string get_ext_name(){return this->ext_name;}
				string get_dir_name_CentCut(){return this->dir_name_CentCut;}
				string get_f_name_CentCut(){return this->f_name_CentCut;}
				string get_ext_name_CentCut(){return this->ext_name_CentCut;}
				int get_nfile(){return this->nfile;}
				int get_xaxis_type(){return axis_type;};
				bool get_hist_parton_level(){return parton_level;};
				bool get_hist_rapidity_shift(){return rapidity_shift;};
				bool get_flag_high_pt_mode(){return high_pt_mode;};
				double get_d_longrange_pm(){return long_range_hist_pm;};
				double get_d_longrange(){return long_range_hist_pm*2.0;};
				double get_d_longrange_mid_rapidity_cut_type2(){return fabs(constants::pPb_mid_rapidity__bkw-constants::pPb_mid_rapidity__fwd);};
				int get_mid_rapidity_cut_type(){return mid_rapidity_cut_type;};
				double get_pPb_mid_rapidity__bkw(){return constants::pPb_mid_rapidity__bkw;}
				double get_pPb_mid_rapidity__fwd(){return constants::pPb_mid_rapidity__fwd;}
				bool get_flag_pPb_cm_calculation(){return flag_pPb_cm_calculation;}
				double get_multiplicity_cut_more_than(){return multip_cut_more_than;};
				double get_multiplicity_cut_less_than(){return multip_cut_less_than;};
				bool get_flag_multiplicity_cut(){return flag_multiplicity_cut;};
				bool get_flag_INEL_lg_0(){return cut_INEL_lg_0;};
				bool get_flag_3outof3_trigger(){return trig_3outof3;};
				bool get_flag_2outof3_trigger(){return trig_2outof3;};
				bool get_flag_VZEROAND_trigger(){return trig_VZEROAND;};
				bool get_flag_ATLAS_cut(){return ATLAS_cut;};
				bool get_flag_only_core(){return only_core;} 
				bool get_flag_only_corona(){return only_corona;}
				bool get_flag_print_eBye(){return print_eBye;}
				bool get_flag_CentralityCut(){return CentralityCut;}
				bool get_flag_print_dndmt(){return print_dndmt;} 
				bool get_flag_Specify_dir_for_CentralityCut(){return this->Specify_dir_for_CentralityCut;}
				bool get_flag_Specify_f_for_CentralityCut(){return this->Specify_f_for_CentralityCut;}
				bool get_flag_Specify_ext_for_CentralityCut(){return this->Specify_ext_for_CentralityCut;}


				//Functions for eBye info
				//----------------------------

				class eByeMulti{
					public:
						EbyeInfo ebye;
						eByeMulti(shared_ptr<settings> set_in, const string inputpath){
							EbyeInfo ebye_;
							this->get_EbyeInfo(set_in, inputpath, ebye_);
							ebye=ebye_;
						}
					private:
						void get_EbyeInfo(Settings::Options options, const string inputpath, EbyeInfo& ebye){
							auto utl_ = make_shared<Util_func>();
							double rap_shift=0.0;
							if(options.get_hist_rapidity_shift() || options.get_flag_pPb_cm_calculation()){
								rap_shift=(options.get_flag_pPb_cm_calculation())? constants::pPb_rap_shift_from_lab_to_cm:options.dlty;
							}
							utl_->get_EbyeInfo_(inputpath, ebye, rap_shift, options.get_flag_VZEROAND_trigger(), options.get_hist_parton_level());
						}

				};
				void open_eBye_output(const string output){
					string output_eBye=output+"/"+constants::fname_EbyeInfo;
					ofs_eBye.open(output_eBye.c_str());  
				}
				void print_EbyeInfo(const int i, const eByeMulti Multi){
					ofs_eBye << i << "  " << Multi.ebye.multiplicity << "  " << Multi.ebye.multiplicity_V0M << "  " << Multi.ebye.weight << endl;
				}


				//Constructor
				//--------------
				Options():
					inputfname(constants::default_inputfname),
					out_directory_name(constants::default_out_directory_name),
					ext(constants::default_ext),
					out_fname(constants::default_out_fname),
					nfiles(constants::default_nfiles),
					CentralityCut(false),
					Specify_dir_for_CentralityCut(false),
					Specify_f_for_CentralityCut(false),
					Specify_ext_for_CentralityCut(false),
					axis_type(0),
					mid_rapidity_cut_type(0),
					dlty(0.0),
					multip_cut_more_than(constants::multip_cut_more_than),
					multip_cut_less_than(constants::multip_cut_less_than),
					long_range_hist_pm(constants::default_midy_pm),
					parton_level(false),
					rapidity_shift(false),
					high_pt_mode(false),
					cut_INEL_lg_0(false),
					trig_3outof3(false),
					trig_2outof3(false),
					trig_VZEROAND(false),
					ATLAS_cut(false),
					only_core(false),
					only_corona(false),
					flag_pPb_cm_calculation(false),
					flag_multiplicity_cut(false),
					print_eBye(false),
					CentralityCut(false),
					print_dndmt(false),
					nfile(1),
					f_name("xxx"),
					ext_name("xxx"),
					dir_name(""),
					subdir_name(""),
					zerofill(true),
					collision_type(3),
			{};

		};
		//------------------------------------------------------------------------


		Options options;
		LogSettings set;

		Settings(int argc, char* argv[]){

			auto ms = std::make_shared<Message>();
			init(argc, argv);

		};
		~Settings(){};


		void init(int argc, char* argv[]){

			//if(!ms->enough_argument(argc)) exit (1);

			for(int i=1; i<argc; i++) {
				set.options.push_back(argv[i]);
				if(!strcmp(argv[i],"-n")) {options.nfiles = atoi(argv[i+1]);}
				else if(!strcmp(argv[i],"-outdir")){options.out_directory_name= argv[i+1];}
				else if(!strcmp(argv[i],"-path")) {options.inputfname= argv[i+1];}
				else if(!strcmp(argv[i],"-ext")) {options.ext= argv[i+1];}
				else { 
					std::string opt_in(argv[i]);
					if(opt_in.find('-')==std::string::npos)continue;
					cout << "ERROR:( There is no such an option: " << opt_in << endl; 
					exit(1);
				}
			}
		}


};
#endif
